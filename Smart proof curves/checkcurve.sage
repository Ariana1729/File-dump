def launch_attack(P, Q, p, a, b):
    E = P.curve()
    Eqp = EllipticCurve(Qp(p, 8), [a,b])
    P_Qps = Eqp.lift_x(ZZ(P.xy()[0]), all=True)
    for P_Qp in P_Qps:
        if GF(p)(P_Qp.xy()[1]) == P.xy()[1]:
            break
    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[0]), all=True)
    for Q_Qp in Q_Qps:
        if GF(p)(Q_Qp.xy()[1]) == Q.xy()[1]:
            break
    p_times_P = p * P_Qp
    p_times_Q = p * Q_Qp
    x_P, y_P = p_times_P.xy()
    x_Q, y_Q = p_times_Q.xy()
    phi_P = -(x_P / y_P)
    phi_Q = -(x_Q / y_Q)
    k = phi_Q / phi_P
    return ZZ(k) % p

m = 13371337133713371337
p = 9055143581112854176276895042285710460723108978557666034123415477018072001970061426672624329439759335080606488177149474171996075483409049792612801728916169
a = 4373646996378151512455656624582807064772705393046942683917357178439270107389493699918737378247846053533413159578168956001102868195930751519390622192755414
b = 4808190416854832198793531499088760126326534714903725869136090178428354231884645362893589892205425574982565324610949570011385492260538868914233370056633578
n = 5731324763340325603927785243350866222759585380360465122129429464194541752379593867054435169345657395612172003481183940183962601962750298023010148916950779
k = 4449402376847082730701850117495630791896099087292165904776565075493628520664265996273054115306846875860461024574556627603251191721462240313030500149544710
a = a+m*p
b = b+(n+m*k)*p

s = 2

E = EllipticCurve(GF(p), [a, b])
assert E.order()==p
P = E.gens()[0]
t = launch_attack(P, s*P, p, a, b)
print(f"Expected {s}, attack gave {t}")
